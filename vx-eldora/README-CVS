
Summary:

You should be able to build eldora vx code on eldora1-ux (the 1u in
Charlie's office) in /net/eldora/eldora.  I've only tested a make in
/net/eldora/eldora/vx/hskp/src.  The code is a copy of /net/eldora/eldora
on the EOL network (eg, on syrah) as of this afternoon, 8/9/05.  Whatever
is not updated there is not on eldora1-ux.

Following are the grueling details.

On eldora1-ux:

The makefiles have several paths and executables hardcoded, so I've
attempted to recreate those paths and programs on eldora-ux1:

  /vx		The vx system includes (/vx/h), config, and libraries.
  /ELDORA 	The /net/eldora/eldora tree.
  /net/eldora/eldora
  /net/projects/common
  gcc68k	The m68k-wrs-vxworks cross-compiler.
  ld68k		The linker.
  /net/vx	Same as /vx.
  /net/local_lnx/include/vx++
		Header files for standard C++ library.  This appears to
		be some version of the GCC stdc++ library.  See below.
  /usr/local/include/vx++
		Same as above.

Here's what I did to recreate these requirements:

I copied ~eldora/eldora_linux/usr/local/vx to /usr/local/vx, and linked /vx
to /usr/local/vx.

I copied syrah:/net/projects/common to /usr/local/common, and created links
in /net which make /net/projects/common point to that directory.

I built a GCC cross-compiler on syrah using older versions binutils (2.9.1)
and gcc (2.95.3).  I built them in /net/src/prog-tools/m68k-wrs-vxworks and
installed them to /opt/local/m68k-wrs-vxworks.  There are a few changes to the
gcc and binutils source required to get them to compile.

I copied syrah:/opt/local/m68k-wrs-vxworks into eldora1-ux:/opt, and
created a link so that /opt/local/m68k-wrs-vxworks exists.

In /opt/local/m68k-wrs-vxworks/bin, I created links from the fully
qualified program names (eg, m68k-wrs-vxworks-gcc) to the shortened form
hardcoded in the makefiles, mostly ld68k and gcc68k.

(2008/01/15) There is now a dummy libm.a created like this:

    $ /opt/local/m68k-wrs-vxworks/bin/m68k-wrs-vxworks-ar -crv \
      /opt/local/m68k-wrs-vxworks/lib/gcc-lib/m68k-wrs-vxworks/2.95.3/libm.a
    $ /opt/local/m68k-wrs-vxworks/bin/m68k-wrs-vxworks-ranlib \
      /opt/local/m68k-wrs-vxworks/lib/gcc-lib/m68k-wrs-vxworks/2.95.3/libm.a
      
since the g++ cross-compiler always wants to bring it in when linking, even 
though libm function is built in to the VxWorks kernel.  Here's the web page 
that provided this fix:

    http://sources.redhat.com/ml/crossgcc/2000-07/msg00112.html

I edited ~eldora/.bashrc to add the /opt/local/m68k-wrs-vxworks/bin
directory to the path.

I checked out the /code/cvs/vx-eldora tree into ~eldora/vx-eldora and tried
a make in vx/hskp/src.  However there are a few errors thanks the
elimination of the duplicate headers between rpc/include and rpc/header and
so on.  Some of these are problems where the makefile puts one directory on
the include path but not the other, and the header moved.  Some problems
are makedepend dependencies built into the makefiles which now fail because
the file is no longer where it was originally found.

So I copied the entire /net/eldora/eldora/tree onto eldora1-ux, under
/net/eldora on eldora1-ux, and I changed the /ELDORA link to point to
/net/eldora/eldora instead of ~eldora/vx-eldora.

I created the link /net/vx which points to /vx.

I copied /usr/local/include/vx++ from pandora to /opt/include, and created
links in /net so that /net/local_lnx/include/vx++ points to it.

I removed a makedepend line in hskp/src/main/makefile for the
sys/feature_test.h file, which apparently doesn't exist on linux.

If the makedepend stuff becomes too cumbersome, it would be reasonable to
remove all of the makedepend sections from all of the makefiles in
/net/eldora/eldora.

With that, I could successfully run make in /net/eldora/eldora/vx/hskp/src.
I have no idea about the other directories.


cvs:

I've committed all of the /net/eldora/eldora tree (as it was a couple of
weeks ago) into the CVS module vx-eldora.  Basically I removed all of the
object files, tried to reconcile the duplicates under rpc/include, and
removed extra source directories and files which I knew to be obsolete
(such as the multiple clk versions).  I started a log of the changes before
I gave up keeping track, and that log follows at the end.

I've spent some time trying to replace the makefiles with scons.  There is
a SConstruct file in vx/ and a Sconscript for building hskp in vx/hskp.
The standard config directory (CVS module raddx/config) needs to be checked
out or linked into vx/config.  Then run scons in the vx/ directory.  There
are a couple options to be set in vx/config.py.  See
/code/granger/vx-eldora/vx for an example.

My ultimate goal is to get the eldora vx source building with scons, finish
all the cleaning up in the tree so that all obsolete code is removed, and
make the build much more self-contained.


Pending questions:

The cross-compiler I built on syrah has not been tested.  None of the code
generated by it has been run on the tadpoles.  Using the original makefiles
and all of their quirky incantations, as well as using a similar compiler
version, offers a reasonable expectation that it should work.  The GCC
version on pandora is 2.95.2, and I built 2.95.3.

What is /usr/local/include/vx++?  Where did it come from?  Is there some
reason the g++ stdc++ library which is installed as part of the
cross-compiler is not used?  This leads to the next question:

Why -nostdinc for gcc?  The cross-compiler installs the vx system headers
into it's sys-include directory, ie, it copied vx/h entirely and ran
fixincludes on them, so it should be preferable to using the vx/h
installation directly.  All that's needed from the vx system tree is the
vx/config directory. (BTW, what is that and how careful do I need to be
about getting the right config subdirectory on the include path?  As in
config/eldora.tp41 versus something else.)

The makefiles link vx/hskp/bin/housekeeper.o with ld instead of g++, and
the gcc and stdc++ libraries are linked explicitly on the command line.
Why not link with g++?  (16 Jan 2008 - This may be a result of the g++
linking problem noted above, where it always wants to load libm, but there
was no libm.  Since this is fixed, we may be able to link with g++ now.)

There is a vx/hskp/src/minirims directory, which is supposed to be built as
far as I can tell from vx/hskp/src/makefile.  However it requires a header
file numinDef.h from vx/minirims/include, next to vx/minirims/src.  What is
the difference between vx/hskp/src/minirims and vx/minirims?  Does
vx/minirims get built anymore?  If not, then I need to move numinDef.h into
the hskp/src/minirims and forget about vx/minirims.  I have a note from my
conversation with Eric that vx/minirims is obsolete, but I wanted to check.

Within minirims directories are ncar, new, and sandia subdirectories.  Are
those obsolete too?

For now, both minirims directores and all of the ncar, new and sandia
subdirs have been added to cvs.  Once I know what can be removed, I'll
remove them from cvs.

What's the relation between vx/vmevme_int and vx/hskp/src/vmevme?  right
now housekeeper.o links to vx/vmevme_int/sendInt.o.

What is vx/mhen/src/time_series?  It contains lots of links mixed with
source files.

It turns out that the rpc/include and rpc/header include files are included
from both places in different makefiles.  Some makefiles put the rpc/header
and rpc/hskp directories on the include path but not rpc/include, and
others must do the reverse.

And some makefiles have hardcoded makedepend paths...


================================================================
Log of changes made to the copy of /net/eldora/eldora:

removed doc/logs and doc/specs

move *.skel into doc/skel

remove $Log$
remove Revision 1.4  2008/01/16 00:24:43  burghart
remove Added a note about creating a dummy libm.a to make g++ cross-compiler linking happy.
remove
remove Revision 1.3  2005/08/09 22:55:56  granger
remove latest notes about building on eldora1-ux
remove
remove Revision 1.2  2005/08/09 18:47:57  granger
remove updates to build hskp with scons
remove
remove Revision 1.1  2005/08/03 20:28:30  granger
remove updates from /net/eldora/eldora/rpc/mhen
remove from the skeleton files

mv Directory into doc

rm -rf bin

removed all *~ and *.o files, intending to copy back any .o that turn
out to be needed

remove diag/agc and diag/bin since empty

rm all but *.c files from diag/datatape

import RCS files from diag/mcpl/RCS

remove diag/mcpl/mcpl_menu.rn

rm -rf diag/mcpltst

rm -rf diag/tape (empty)

rm diag/vmevme/includes

import RCS files from diag/vmevme

import RCS files under display

rm display/util/uitc/{a,q}


rpc/include/Aircraft.h actually looks like it got overwritten with
Parameter.h, but the copy in rpc/header still has a Aircraft structure in
it, so I'm assuming that's correct


================================================================

Todo:

I can now build with the tools in /net/local_lnx/bin/m68k-, by putting
/net/local_lnx/lib/gcc-lib/m68k.../2.95.2 first in the path, and linking
m68k-wrs-vxworks-as into that directory as 'as'.  

See new docs about building cross-compiler, and try it out.


Strategy:

start a eldora-vx repository in /code/cvs, and start adding files directly
as they are needed, so that RCS ,v files can be moved directly into the
repository in the right place, preserving history

call it vx-eldora until it settles down, to avoid lots of emails

don't try to reconcile similar code between /net/eldora/eldora tree and
what's already in CVS.  Get it committed and building first, in as close a
form as the original, then reconcile.

================
scons:

the pkg_environment can be used in the same way dual environments are
used for ads3.  create two prototypes, one setup for native and one for
the cross-compile, then pass each as the 'env' export.  The question is
whether builddir gets propagated into the created environment.

The other question is targets which are platform independent.  Should they
not use the passed-in environment, but a default environment instead?  eg,
targets like doxygen.  they don't need to be built for each platform, and
they shouldn't be put into builddirs.


----------------------------------------------------------------

organize and commit the code under /net/eldora/eldora.  The headers 
are already committed somewhere right?  Need to use the new eldora-only
source tree and commit the vxworks code under it, in the same style
as for sabl

kernel objects for housekeeper, rp7a, and rp7f need to be committed to CVS,
currently the operational copies reside on the 4u linux control pc

see eldora/Directory

	header-maker needs to go into cvs, Eric has master copy somewhere

	likewise for dsp code

4u hambo redhat 6.2 in lab has most recent changes

keep unix/hpa

not sure if eldora/display and eldora/tape are needed

makefile in newclk works, but not integrated in top-level makefile

clock/newclk/incl needs to be reconciled with vx/hskp/include

clk probably supercedes clock/newclk

 - remove vx/hskp/src/clock/reif

 - can vx/hskp/src/clock be removed? obsoleted by clk and not built by
   vx/hskp/src/makefile?

housekeeper.o is the final product

the hskp and mhen directories build separate vxworks tadpole (68000?)
binaries for separate CPUs.  the other directories are for libraries shared
between the hskp and mhen

eldora/doc needs to be checked, probably not needed

keep eldora diag

already removed /net/eldora/sabl

ignore eldora/dsp

ignore arinc_NCAR

reconcile vx/minirims and hskp/src/minirims (probably the most recent)

ignore vx/h2

commit tape, but unused

ignore ddpath

ignore mhen/src/mhen_old, mhen/src/mhen

mhen/src needs top-level makefile

'make nu_arch' in mhen/src/nu_archit

how to find unused header files and remove them from the include directory?

find unused source code

ignore eldora/hdr_maker

eldora/lib/vx may be object files that need to be preserved

vx/c and vx/c++ contain object files that need to be preserved

reconcile rpc/include/Header.h,hh


