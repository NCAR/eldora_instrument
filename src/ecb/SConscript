env = Environment(tools = ['default', 'boost_program_options'])
env.Append(LIBPATH='.')

libsources = Split("""
ddsmenu.cpp
dds.cpp
dectohex.cpp
delay.cpp
etherio24.cpp
hextodec.cpp
mygetline.cpp
rfinit.cpp
rfputval.cpp
samenu.cpp
sa.cpp
trigmuxmenu.cpp
trigmux.cpp
""")

# a library of all of the ecb support routines
ecblib = env.Library('ecb', libsources)

# menu drive app for programming dds, attenuators, or trigger mux
ecbmain = env.Program('ecbmain', 'ddsprogrammer_cpp.cpp', LIBS=ecblib)
i1 = env.InstallProgram(ecbmain)
env.Default(ecbmain)
env.Alias('install',i1)

# command line programming of the dds
progdds = env.Program('progdds', 'progdds.cpp',LIBS=['ecb','boost_program_options'])
env.Default(progdds)
env.Alias('install', progdds)

# command line programming of the sa
progsa = env.Program('progsa', 'progsa.cpp',LIBS=['ecb','boost_program_options'])
env.Default(progsa)
env.Alias('install', progsa)

# command line programming of the trigger mux
progmux = env.Program('progmux', 'progmux.cpp',LIBS=['ecb','boost_program_options'])
env.Default(progmux)
env.Alias('install', progmux)

# Program to set the IP address for an EtherIO24 card
ether_setup = env.Program('etherio_setup/ether_setup', ['etherio_setup/ether_setup.c'])
i2 = env.InstallProgram(ether_setup)
Default(ether_setup)
env.Alias('install',i2)
