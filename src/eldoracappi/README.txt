Introduction:
EldoraCappi is adapted from eldorappi.  CAPPI::beams are very similar
to PPI::beams, with the addition of a X,Y position for the each beam.

EldoraCappi reads a netCDF file, generated by cappigen.
The netCDF file contains housekeeping, DBZ and VR data for beams that
are "close" to horizontal.  (The angle tolerance for "close" to horizontal
is a command line argument to cappigen.)

Recording multiple (nearly) horizontal beams allows EldoraCappi to support an offset
to the roll, since the aircraft data system has a 'bias' to the aircraft
roll. According to Michael Bell, this offset is generally constant for an
entire flight.  We'll need to add a UI and a Qt slot for the user to adjust
the value of EldoraCappi::_rollOffset.


cappigen details;
cappigen copies /opt/eldora/conf/cappi_template.nc to its output file.
Opening an existing netCDF file with the correct structure avoids having
to have dimension and variable creation code in cappigen (as recommended
by Unidata). 

If you need to add fields to the netCDF file, modify capp_gen/cappi.cdl, and run

$ ncgen -o  /eldora/conf/cappi_template.nc cappi.cdl

Creating an input file for EldoraCappi:

Run the eldoraprod, or run eldoraplayback --input <path_to_archive_file>.
Run 'cappigen' which is a DDS client for products, which writes 
"/tmp/cappi.nc"

To build eldoracappi, you need the following symbolic links, to share files from eldorappi

(these  shared source files should be in a common library, but I didn't
have time to do that)

Arrow.xpm -> ../eldorappi/Arrow.xpm
ColorBarSettings.cpp -> ../eldorappi/ColorBarSettings.cpp
ColorBarSettings.h -> ../eldorappi/ColorBarSettings.h
ColorBarSettings.ui -> ../eldorappi/ColorBarSettings.ui
Paw.xpm -> ../eldorappi/Paw.xpm
ProductInfo.cpp -> ../eldorappi/ProductInfo.cpp
ProductInfo.h -> ../eldorappi/ProductInfo.h
Z.xpm -> ../eldorappi/Z.xpm

define TEST_MOVE in EldoraCappi to exagerate the velocity of the plane,
which makes it easier to debug with a short data set.

TODO:
1) Correctly draw the beams, mapping distances in km to  OpenGL
coordinates.  The display looks pretty scrambled right now, but at least
all the beams don't start at (0,0)

2) Delete the oldest beams after some maximum number of beams have been
drawn.

3) Allow the user to pan (with an auto-option), so the most current beams
are always visible.  This may require calling CAPPI::beam::moveBeam() for
each beam, to change the (X,Y) coordinate of each beam.

4) Label the display with lat/lon coordinates

5) Enable image saving, pan, zoom, similar to eldorappi.  They are
currently disabled, because I wasn't ready to test them.

6) Add a UI to let the user select starting time.

7) Add a UI to let the user select an arbitrary netCDF file, although this
can be done via the command line.

8) Default to reading the last 'N' (30?) minutes of beams on startup.
