module EldoraDDS {

enum RadarChoice {Forward, Aft};
typedef sequence<float> A_B_P;
typedef sequence<short> Product;
typedef sequence<short> TS;
  
#pragma DCPS_DATA_TYPE "EldoraDDS::TimeSeries"
#pragma DCPS_DATA_KEY  "EldoraDDS::TimeSeries radarId"

  struct TimeSeries {
    RadarChoice radarId;
    long long timestamp;
    float prfSeconds;
    float azDegrees;
    long nci;
    unsigned short chan;
    unsigned short firstgate;
    TS tsdata;
  };

#pragma DCPS_DATA_TYPE "EldoraDDS::Pulse"
#pragma DCPS_DATA_KEY  "EldoraDDS::Pulse radarId"

  struct Pulse {
    RadarChoice radarId;
    long long timestamp;
    float prfSeconds;
    float elDegrees;
    float powerDbm;
    long nci;
    unsigned short chan;
    A_B_P abp;
  };

#pragma DCPS_DATA_TYPE "EldoraDDS::Products"
#pragma DCPS_DATA_KEY  "EldoraDDS::Products radarId"

  struct Products {
    RadarChoice radarId;
    long long timestamp;
    float prfSeconds;
    float elDegrees;
    float gateSpacingKm;
    
    float p1Gain;
    float p1Offset;
    Product p1;
    
    float p2Gain;
    float p2Offset;
    Product p2;
    
    float p3Gain;
    float p3Offset;
    Product p3;
    
    float p4Gain;
    float p4Offset;
    Product p4;
    
    float vrGain;
    float vrOffset;
    Product vr;
    
    float vsGain;
    float vsOffset;
    Product vs;
    
    float vlGain;
    float vlOffset;
    Product vl;
    
    float dmGain;
    float dmOffset;
    Product dm;
    
    float dbzGain;
    float dbzOffset;
    Product dbz;
    
    float swGain;
    float swOffset;
    Product sw;
    
    float ncpGain;
    float ncpOffset;
    Product ncp;
  };

#pragma DCPS_DATA_TYPE "EldoraDDS::HouseKeeping"
#pragma DCPS_DATA_KEY  "EldoraDDS::HouseKeeping radarId"

  struct HouseKeeping {
    RadarChoice radarId;
    long long timestamp;
    float pitch;
    float roll;
    float yaw;
  };
};
