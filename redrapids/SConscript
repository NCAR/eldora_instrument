import os
tools = ['ddssvc']
env = Environment(tools = ['default'] + tools)

redRapidsDevelDir = os.path.join('#', 'redrapids', 
                                 'DSK-320-002-R05 (CA C API and Sample Code)',
                                 'channeladapterlib', 'R05')
redRapidsDevelLibDir = os.path.join(redRapidsDevelDir, 'linux_x86-32')

env.AppendUnique(CPPPATH=[redRapidsDevelDir,])
env.AppendUnique(CPPDEFINES = ['LINUX',])

# The redrapids and library sources

rrsources = [os.path.join(redRapidsDevelDir, 'ca_functions.c'),
             os.path.join(redRapidsDevelDir, 'ca_membuffer.c')]

libsources = Split("""
FilterSpec.cpp
RR314.cpp
RR314isr.cpp
RR314sim.cpp
""")

librr314 = env.Library('rr314', rrsources + libsources)

# libraries:
# Note that rr314 is linked before channeladapter, since it uses the
# channeladapter library, but also linked after, since the channeladapter
# library needs symbol Adapter_ISR which is in the rr314 library.  Nice
# circular dependency...
libs = Split("""
rr314
channeladapter
rr314
boost_program_options
ReliableMulticast 
SimpleUnreliableDgram 
SimpleTcp
OpenDDS_Dcps
TAO_PortableServer
TAO_AnyTypeCode
dl
rt
""")
env.Append(LIBS = libs)

# library paths:
env.AppendUnique(LIBPATH = [redRapidsDevelLibDir, '.'])

# build test
testrr314 = env.Program('testrr314', 'testrr314.cpp')
